{"version":3,"sources":["comp/codeView.js","comp/Card.js","_allStates.js","comp/selectIntterrupt.js","comp/IDT_dialog.js","comp/interruptRequest.js","comp/setPriority.js","comp/setMask.js","comp/SettingMenu.js","App.js","serviceWorker.js","index.js"],"names":["CodeView","props","React","useState","open","setOpen","handleClose","align","style","marginTop","Tooltip","title","placement","IconButton","onClick","aria-label","color","Dialog","fullWidth","maxWidth","onClose","width","height","src","codeimg","onDragStart","e","preventDefault","DialogActions","Button","autoFocus","SimpleCard","MainColor","on","Card","backgroundColor","CardContent","description","ALL_STATE_VALS","nums","id","disc","cpu","pc","context","ieflag","pcb","HWinterrupt","useStyles","makeStyles","avatar","SelectInterrupt","classes","count","interrupt","mask","setInterrupt","plusCount","setInterruptDialog","DialogContent","List","map","type","i","interrupt_clone","push","ListItem","button","undefined","disabled","indexOf","key","ListItemAvatar","Avatar","className","ListItemText","primary","tablerow","display","alignItems","justifyContent","ViewIDT","topen","aria-labelledby","aria-describedby","Divider","Tablerow","main","num","working","variant","window","innerHeight","tt","page","InterruptRequest","setWorking","states","setCount","priority","lightOn","n","some","item","index","Iteration","arr","returnValue","Array","isArray","length","int","sort","a","b","value","pop","Grid","justify","container","spacing","xs","sm","alt","fontSize","SortableItem","sortableElement","margin","Paper","SortableContainer","sortableContainer","children","listStyle","SetPriority","setPriority","PriorityDialog","setPriorityDialog","onSortEnd","oldIndex","newIndex","arrayMove","SetMask","setMask","MaskDialog","setMaskDialog","text","setText","TextField","onChange","event","target","label","split","SettingMenu","anchorEl","setAnchorEl","currentTarget","Menu","keepMounted","Boolean","MenuItem","innerWidth","priority_default","logo","position","buttonGroup","footer","marginRight","marginLeft","App","interruptDialog","minusCount","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4002895e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport default function CodeView(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleOnDragStart = (e) => e.preventDefault()\r\n  return (\r\n    <div>\r\n      <div align=\"right\" style={{marginTop:-50}}>\r\n        <Tooltip title=\"Code View\" placement=\"left\">\r\n           <IconButton onClick={handleClickOpen}  aria-label=\"settings\">\r\n            <CodeIcon style={{color:'#3F51B5'}}/>\r\n          </IconButton>\r\n         </Tooltip>\r\n        </div>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n          <div align=\"center\">\r\n              <img style={{width:'80%',height:'80%'}} src={props.codeimg} onDragStart={handleOnDragStart} />\r\n          </div>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CodeView from './codeView';\r\n\r\nexport default function SimpleCard(props) {\r\n\r\n  const MainColor = props.on?'#3F51B5':\"#ddd\";\r\n  \r\n  return (\r\n\r\n      <Card >\r\n        <div style={{height:20,width:\"100%\",backgroundColor:MainColor}}/>\r\n        <CardContent>\r\n          {\r\n            props.on?\r\n            <div>\r\n              <h2>{props.title}</h2>        \r\n              <p> {props.description}</p>\r\n            </div>\r\n            :\r\n            <div>\r\n              <h3>{props.title}</h3>        \r\n              <p> {props.description}</p>\r\n            </div>\r\n          }\r\n          \r\n        </CardContent>\r\n        <CodeView codeimg={props.codeimg}/>\r\n      </Card>\r\n\r\n  );\r\n}","export function ALL_STATE_VALS(nums){\r\n\r\n  return([\r\n    { id: 0,  //현재단계 인덱스\r\n      title:\"인터럽트 발생!\", //현재단계 타이틀 \r\n      disc: \"외부장치가 APIC에게 인터럽트를 보냅니다\", //현재 단계 설명\r\n      cpu:{ //CPU 상태\r\n        pc:\"📫\", // 이모티콘으로 주소값을 표현하였습니다\r\n        context:\"📁\",// 이모티콘으로 문맥을 표현하였습니다\r\n        ieflag:\"\"\r\n      },\r\n      pcb:{ //PCB 상태\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 1, \r\n      title:\"인터럽트 발생!\", \r\n      disc: \"외부장치에 인터럽트가 발생하고, APIC에게 인터럽트를 보냅니다.\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"\"\r\n      },\r\n      pcb:{\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 2, \r\n      title:\"인터럽트 발생!\", \r\n      disc: \"APIC는 CPU에게 인터럽트발생을 알립니다\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 3, \r\n      title:\"인터럽트 요청\", \r\n      disc: \"진행중이던 프로세스를 끝낸 CPU는 인터럽트 발생을 확인하고, IEflag가 1이라면 확인 신호(INTA)를 보냅니다.\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 4, \r\n      title:\"인터럽트 처리 준비\", \r\n      disc: \"CPU는 다른 인터럽트를 받지않게 IEflag를 0으로 바꿉니다\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"0\"\r\n      },\r\n      pcb:{\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 5, \r\n      title:\"인터럽트 처리 준비\", \r\n      disc: \"APIC는 INTA를 확인한뒤, IRR중 우선순위가 가장 높은 장치를 선정하고, 해당비트를 ISR에 set합니다\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"0\"\r\n      },\r\n      pcb:{\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 6, \r\n      title:\"인터럽트 처리 준비\", \r\n      disc: \"APIC는 IRQ number를 내부적으로 base값을 더하여 data bus를 통해 CPU에 전달합니다.\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"\",\r\n        context:\"\"\r\n      }\r\n    },\r\n    { id: 7, \r\n      title:\"문맥 저장\", \r\n      disc: \"PCB에 복귀주소(PC)와 현재 CPU의 레지스터에 저장되어 있는 실행 중이던 프로세스의 문맥을 저장합니다.(Context-Saving).\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"📫\",\r\n        context:\"📁\"\r\n      }\r\n    },\r\n    { id: 8, \r\n      title:\"ISR 주소 탐색\", \r\n      disc: \"IRQ number활용하여, IDT를 참조해서 ISR주소를 찾아냅니다.\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"📫\",\r\n        context:\"📁\"\r\n      }\r\n    },\r\n    { id: 9, \r\n      title:\"인터럽트 처리\", \r\n      disc: \"ISR값을 PC에 저장하여 CPU가 인터럽트를 처리할 수 있게 합니다.\",\r\n      cpu:{\r\n        pc:`#${nums}`,\r\n        context:\"📁\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"📫\",\r\n        context:\"📁\"\r\n      }\r\n    },\r\n    { id: 10, \r\n      title:\"인터럽트 처리\", \r\n      disc: \"커널에 프로그래밍된 ISR의 코드를 읽어가며 작업을 수행합니다\",\r\n      cpu:{\r\n        pc:`#${nums}`,\r\n        context:\"💿\",\r\n        ieflag:\"1\"\r\n      },\r\n      pcb:{\r\n        pc:\"📫\",\r\n        context:\"📁\"\r\n      }\r\n    },\r\n    { id: 11, \r\n      title:\"인터럽트 처리 완료\", \r\n      disc: \"인터럽트 작업이 끝나면 PCB에 저장된 context를 복구하고 PC값을 바꿔줍니다.\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"0\"\r\n      },\r\n      pcb:{\r\n        pc:\"📫\",\r\n        context:\"📁\"\r\n      }\r\n    },\r\n    { id: 12, \r\n      title:\"인터럽트 처리 완료\", \r\n      disc: \"인터럽트 작업이 끝나면 PCB에 저장된 context를 복구하고 PC값을 바꿔줍니다.\",\r\n      cpu:{\r\n        pc:\"📫\",\r\n        context:\"📁\",\r\n        ieflag:\"0\"\r\n      },\r\n      pcb:{\r\n        pc:\"📫\",\r\n        context:\"📁\"\r\n      }\r\n    },\r\n    ]);\r\n  }\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport SettingsInputHdmiIcon from '@material-ui/icons/SettingsInputHdmi';\r\nimport CodeView from './codeView';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nconst HWinterrupt = [\r\n    '시스템타이머', \r\n    '키보드', \r\n    '기타',\r\n    'COM2 및 COM4',\r\n    'COM1 및 COM3', \r\n    'LPT2 또는 사운드카드', \r\n    '플로피 디스크 컨트롤러',\r\n    'LPT1 또는 사운드카드',\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: '#ddd',\r\n    color: '#3F51B5',\r\n  },\r\n});\r\n\r\nexport default function SelectInterrupt(props) {\r\n  const classes = useStyles();\r\n  const {count,interrupt,mask,setInterrupt,plusCount,setInterruptDialog} = props;\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={count}>\r\n        <DialogContent>\r\n        <br/>\r\n        <br/>\r\n        <CodeView codeimg=\"cpu.png\"/>\r\n        <p>인터럽트를 요청할 HW를 선택해주세요.</p>\r\n      <List>\r\n        {HWinterrupt.map((type,i) => { //배열내 요소 각각을 순서대로 불러 함수 반환값으로 새로운 배열을 만듭니다.\r\n          let interrupt_clone = [...interrupt];\r\n          interrupt_clone.push(i); //클릭된 인터럽트 추가\r\n          return(\r\n            <ListItem button onClick={() => { //클릭 이벤트 함수\r\n              if(count!==0 && setInterruptDialog!==undefined){ //맨처음 인터럽트르 설정하는거라면\r\n                setInterrupt(interrupt_clone); //변경된 인터럽트 업데이트\r\n                setInterruptDialog(false)//다이얼로그 종료\r\n              }else { \r\n                setInterrupt(interrupt_clone); //변경된 인터럽트 업데이트\r\n                plusCount() //다음 단계로 넘어감\r\n              }}}\r\n            disabled={mask.indexOf(i)===-1?false:true} //마스크가 되어있다면 disable처리\r\n             key={type}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.avatar}>\r\n                <SettingsInputHdmiIcon/>\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={type} />\r\n          </ListItem>\r\n        )}\r\n        )}\r\n      </List>\r\n      </DialogContent>\r\n    </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles({\r\n  tablerow:{\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width:100,\r\n    height:50\r\n  },\r\n});\r\n\r\nexport default function ViewIDT(props) {\r\n\r\nconst topen = props.count;\r\n\r\n  return (\r\n    <div align=\"center\">\r\n     \r\n      <Dialog\r\n        open={topen}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <div align=\"center\" style={{width:300}}>\r\n            <p>Interrupt Description Table</p>\r\n        </div>\r\n        <DialogContent>\r\n           <Divider/>\r\n           <Tablerow main={false} num={props.working-1}/>\r\n           <Tablerow main={true} num={props.working}/>\r\n           <Tablerow main={false} num={props.working+1}/>\r\n           <Divider/>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.plusCount} variant=\"contained\" color=\"primary\" autoFocus>\r\n            Next\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Tablerow(props){\r\n  const classes = useStyles();\r\n  const {num,main} = props;\r\n\r\n  return(\r\n    <div style={{display:'flex',backgroundColor:main?\"#3F51B5\":\"#fff\"}}>\r\n      <div className={classes.tablerow}>\r\n          {main?<b className=\"idt\">{num}</b>:<p>{num}</p>}\r\n      </div>\r\n      <div className={classes.tablerow}>\r\n          {main?<b className=\"idt\">{`#${num}`}</b>:<p>{`#${num}`}</p>}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SimpleCard from './Card';\r\nimport {ALL_STATE_VALS} from '../_allStates';\r\nimport SelectInterrupt from './selectIntterrupt';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ViewIDT from './IDT_dialog'\r\n\r\nlet height = window.innerHeight;\r\nlet tt = true;//반복방지 변수 나중에 지우는거\r\n\r\nconst useStyles = makeStyles({ // 가로,세로 중앙으로 정렬해줍니다.\r\n  page:{\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width:\"95%\",\r\n    height:height*0.8\r\n  },\r\n});\r\n\r\nexport default function InterruptRequest(props) {\r\n  const classes = useStyles();\r\n  const {count,interrupt,setInterrupt,plusCount,working,setWorking,mask,setCount,priority} = props // 인터럽트 단계 중 현재 몇번째 단계인지\r\n  const states =  ALL_STATE_VALS(working); // 각 인터럽트 단계별 설명과 구성요소 data\r\n\r\n  const lightOn=(n)=>{ \r\n    // 각 구성요소가 몇번째 단계에서 작동하는지 property(array)로 받습니다. \r\n    // 예를들어, lightOn([1,2,3])의 경우 인터럽트의 1,2,3번째 단계에서 작동하는 구성요소라는 의미입니다.\r\n    \r\n    return n.some(function(item, index) { return item === count; }) //count는 현재 페이지\r\n    // some변수는 배열안에 어떤 요소라도 판별 함수를 통과하면 true를 반환합니다\r\n  }\r\n\r\n  const Iteration=(arr)=>{ \r\n    let returnValue = [0,0,0,0,0,0,0,0];\r\n    if(Array.isArray(arr)){ \r\n      for(let i =0;i<arr.length;i++){\r\n        returnValue[arr[i]]=1;\r\n       }\r\n    }else{ //ISR은 배열이 아니기때문에\r\n      returnValue[working]=1;\r\n    }\r\n    return returnValue.map((int,i)=>int===1?<b>1</b>:0)\r\n  }// 예를 들어 배열 arr에 3,5가 있다면 3번째 5번째 비트를 1로 바꾸고 출력 00000000 => 00010100\r\n  \r\n\r\n  if(lightOn([5])&&tt){\r\n    let interrupt_clone = [...interrupt];\r\n    interrupt_clone.sort((a, b) => a.value > b.value ? 1 : -1); // 우선순위 기반 정렬\r\n    let will_working = interrupt_clone.pop(); // 가장 우선순위가 높은 것을 pop \r\n    setWorking(will_working); // pop 한 요소를 진행중으로 set\r\n    tt=false; // 반복방지 변수\r\n    setInterrupt(interrupt_clone); // 우선순위가 가장높은것이 pop된 배열으로 업데이트\r\n  }//우선순위 높은 인터럽트 실행\r\n  \r\n  if(lightOn([10]))tt=true;\r\n\r\n \r\n    return (\r\n      <div className={classes.page}>\r\n      <SelectInterrupt count={lightOn([0])} interrupt={interrupt} mask={mask} setInterrupt={setInterrupt} plusCount={plusCount}/>\r\n      <ViewIDT working={working} plusCount={props.plusCount} count={lightOn([8])}/>\r\n      <Grid justify=\"center\" alignItems=\"center\" container spacing={3}> \r\n      {/* 3 x 3 그리드 구조  */}\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={4}>\r\n          <div align=\"center\">\r\n           {\r\n              lightOn([1])?\r\n              <img width={100} height={100} src={\"hardware2.png\"} alt=\"hardware\"/>:\r\n              <img width={100} height={100} src={\"hardware.png\"} alt=\"hardware\"/>\r\n            }\r\n          </div>\r\n        </Grid>\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={1}/>\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={4}>\r\n          <SimpleCard on={lightOn([6,10])} title={\"PCB\"} description={\r\n              <div>\r\n                <p>Program Counter : <b>{states[count].pcb.pc}</b></p>\r\n                <Divider />{/* 구분선 */}\r\n                <p>Context : <b>{states[count].pcb.context}</b></p>\r\n              </div>} codeimg=\"pcb.png\"/>\r\n        </Grid>\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={4}>\r\n          <div align=\"center\">\r\n          {\r\n            lightOn([1])?\r\n            <ArrowDropDownIcon fontSize=\"large\" color=\"primary\"/>:\r\n            <ArrowDropDownIcon fontSize=\"large\" color=\"disabled\"/>\r\n          }\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={1}/>\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={4}>\r\n        </Grid>        \r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={4}>\r\n          <SimpleCard on={lightOn([1,2,4,5])} title={\"APIC\"} description={\r\n          <div>\r\n            <p>IRR : {Iteration(interrupt)}</p> \r\n            <Divider />{/* 구분선 */}\r\n            <p>ISR : {Iteration(working)}</p>\r\n            <Divider />{/* 구분선 */}\r\n            <p>IMR : {Iteration(mask)}</p>\r\n          </div>} codeimg=\"apic.png\"/>\r\n        </Grid>\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={1}>\r\n        <div align=\"center\">\r\n          {\r\n            lightOn([3])?\r\n            <ArrowLeftIcon fontSize=\"large\" color=\"primary\"/>:\r\n            <ArrowRightIcon fontSize=\"large\" color={lightOn([2,5])?\"primary\":\"disabled\"}/>\r\n          }\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid justify=\"center\" alignItems=\"center\" item xs={9} sm={4}>\r\n          <SimpleCard on={lightOn([2,3,5,6,8,9,10])} title={\"CPU\"} description={\r\n          <div>\r\n            <p>Program Counter : <b>{states[count].cpu.pc}</b></p>\r\n            <Divider />{/* 구분선 */}\r\n            <p>Context : <b>{states[count].cpu.context}</b></p>\r\n            <Divider />{/* 구분선 */}\r\n            <p>IEflag : <b>{states[count].cpu.ieflag}</b></p>\r\n          </div>} codeimg=\"cpu.png\"/>\r\n        </Grid>\r\n\r\n      </Grid>\r\n    </div>\r\n    );\r\n  }\r\n\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {sortableContainer, sortableElement} from 'react-sortable-hoc';\r\nimport arrayMove from 'array-move';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport CodeView from './codeView';\r\n\r\nconst SortableItem = sortableElement(({item}) => \r\n    <li style={{margin:10}}>\r\n        <Paper style={{width:'100%',height:40,backgroundColor:'#3F51B5',display:'flex',alignItems:'center',justifyContent:'center'}}>\r\n           <p className=\"priority\">{item} 번 인터럽트</p>\r\n        </Paper>\r\n    </li>\r\n    );\r\n\r\nconst SortableContainer = sortableContainer(({children}) => {\r\n  return <ul style={{listStyle:'none'}}>{children}</ul>;\r\n});\r\n\r\nexport default function SetPriority(props) {\r\n\r\nconst {priority,setPriority,PriorityDialog,setPriorityDialog} = props;\r\n\r\nconst  onSortEnd = ({oldIndex, newIndex}) => {\r\n    setPriority(arrayMove(priority, oldIndex, newIndex));\r\n  };\r\n  return (\r\n    <div align=\"center\">\r\n     \r\n      <Dialog open={PriorityDialog}>\r\n        <DialogContent>\r\n            <br/>\r\n            <br/>\r\n            <CodeView codeimg=\"cpu.png\"/>\r\n            <p>위로갈수록 우선순위가 높아집니다</p>\r\n            <p>박스를 swap 하여 우선순위를 바꿔보세요</p>\r\n            <Divider />\r\n            <SortableContainer onSortEnd={onSortEnd}>\r\n                {priority.map((item, index) => (\r\n                <SortableItem key={`item-${item.value}`} index={index} item={item.value} />\r\n                ))}\r\n            </SortableContainer>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>{setPriorityDialog(false)}} color=\"primary\" autoFocus>\r\n            ok\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CodeView from './codeView';\r\n\r\nexport default function SetMask(props) {\r\nconst {mask, setMask,MaskDialog, setMaskDialog} = props;\r\nconst [text, setText] = React.useState(\"\");\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const submit =()=>{\r\n    setMask(text.split(\",\")); //입력된 값을 ','로 나누고 배열로 변환하여 업데이트합니다.\r\n    setMaskDialog(false); //다이얼로그를 닫습니다.\r\n  }\r\n\r\n  return (\r\n    <div align=\"center\">\r\n     \r\n      <Dialog open={MaskDialog}>\r\n        <DialogContent>\r\n            <br/>\r\n            <br/>\r\n            <CodeView codeimg=\"cpu.png\"/>\r\n            <p>0~8까지의 인터럽트중 마스크하고싶은 인터럽트를 ','로 구분하여 입력해 주세요</p>\r\n            \r\n          <TextField fullWidth onChange={handleChange} id=\"standard-basic\" label=\"ex) 3,4,5\" />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={submit} color=\"primary\" autoFocus>\r\n            ok\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nexport default function SettingMenu(props) {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const {setInterruptDialog, setPriorityDialog, setMaskDialog}=props;\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Button \r\n          color=\"primary\" \r\n          onClick={handleClick}\r\n        >\r\n          <SettingsIcon/>\r\n        </Button>\r\n\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          <MenuItem onClick={()=>{setInterruptDialog(true);handleClose()}}>Add interrupt</MenuItem>\r\n          <MenuItem onClick={()=>{setPriorityDialog(true);handleClose()}}>Set Priority</MenuItem>\r\n          <MenuItem onClick={()=>{setMaskDialog(true);handleClose()}}>Set Mask</MenuItem>\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InterruptRequest from './comp/interruptRequest'; \nimport SelectInterrupt from './comp/selectIntterrupt';\nimport {ALL_STATE_VALS} from './_allStates';\nimport SetPriority from './comp/setPriority'\nimport SetMask from './comp/setMask'\nimport SettingMenu from './comp/SettingMenu';\nimport './App.css';\n\nlet width = window.innerWidth;\nlet height = window.innerHeight;\nconst priority_default=[\n  {value:0},\n  {value:1},\n  {value:2},\n  {value:3},\n  {value:4},\n  {value:5},\n  {value:6},\n  {value:7},\n]\n\nconst useStyles = makeStyles({\n  logo:{\n    position:'absolute',\n    display:'flex'\n  },\n  description:{\n    width:width*0.8,\n  },\n  buttonGroup:{\n    width:width*0.2,\n    display:'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  footer:{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height:height*0.2\n  },\n  index:{\n    marginRight:10,\n    marginLeft:10\n  }\n});\n\n\nfunction App() {\n  const classes = useStyles();\n  let [count, setCount] = React.useState(0);\n  // 인터럽트 단계 중 현재 몇번째 단계인지\n\n  let [interrupt, setInterrupt] = React.useState([]); \n  let [interruptDialog,setInterruptDialog] = React.useState(false); \n  let [working, setWorking] = React.useState(-1); \n\n  let [mask, setMask] = React.useState([]); \n  let [MaskDialog, setMaskDialog] = React.useState(false); \n\n  let [priority,setPriority] = React.useState(priority_default); \n  let [PriorityDialog,setPriorityDialog] = React.useState(false); \n\n  \n  const states =  ALL_STATE_VALS(working);  \n  // 각 인터럽트 단계별 설명과 구성요소를 나타내는 data\n\n  const plusCount=()=>{ \n    if(count ===11){\n      if(interrupt.length>0)setCount(2); //남아있는 인터럽트요청을 처리합니다.\n      setWorking(-1);\n    }else{\n      setCount(++count);\n    }\n  };//다음단계로 넘어가는 클릭함수 입니다.\n\n  const minusCount=()=>{\n    if(count ===0) return;\n    setCount(--count);\n  };// 전단계로 돌아가는 클릭함수 입니다\n\n    return (\n      <div>\n        <div className={classes.logo}>\n          <SettingMenu \n            setMaskDialog={setMaskDialog}\n            setPriorityDialog={setPriorityDialog}\n            setInterruptDialog={setInterruptDialog}\n          />\n          <img src=\"title.png\" alt=\"logo\"/>\n        </div>{/* 메뉴 및 로고  */}\n          \n          <SelectInterrupt count={interruptDialog} interrupt={interrupt} setInterruptDialog={setInterruptDialog} mask={mask} setInterrupt={setInterrupt} plusCount={plusCount}/>\n          <SetPriority priority={priority} setPriority={setPriority} PriorityDialog={PriorityDialog} setPriorityDialog={setPriorityDialog}/>\n          <SetMask mask={mask} setMask={setMask} MaskDialog={MaskDialog} setMaskDialog={setMaskDialog}/>\n           {/* Dialog for Setting */}\n\n          <InterruptRequest\n            priority={priority}\n            working={working}\n            setWorking={setWorking}\n            mask={mask}\n            interrupt={interrupt} \n            setInterrupt={setInterrupt} \n            minusCount={minusCount} \n            plusCount={plusCount} \n            count={count}\n            setCount={setCount}\n          />{/* 현재 인터럽트 단계 시각화  */}\n  \n        <div className={classes.footer}> \n            <div className={classes.description} align=\"center\">\n              <p>{states[count].disc}</p>\n              <h1>{states[count].title}</h1>\n            </div>\n            <div className={classes.buttonGroup}>\n              <div onClick={minusCount}><img width={30} height={30} src={count===0?\"prev2.png\":\"prev1.png\"} alt=\"prev\"/></div>\n              <div className={classes.index}><h1>{states[count].id}</h1></div>\n              <div onClick={plusCount}><img width={30} height={30}  src={count===states.length?\"next2.png\":\"next1.png\"} alt=\"next\"/></div>\n          </div>      \n        </div>{/* 맨아래 위치한 인터럽트 설명부분 및 네비게이터 */}\n\n      </div>\n    )\n  }\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}